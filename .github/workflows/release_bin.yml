# =============================================================================
#  Release Assets and Homebrew's Tap
# =============================================================================
# This workflow will build the binaries and push the archives to the assets in
# the releases page if a release was created. Then pushes the tap config file
# to update Homebrew tap. See: ../../.goreleaser.yml
name: Release

on:
  workflow_dispatch:
  release:
    types:
      - created
    tags:
      - 'v*'
jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # required for the changelog to work correctly
          fetch-depth: 0

      # Setup
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17.x'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Login to GitHub Container Registry and DockerHub
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Import GPG key to sign the artifacts (checksums.txt)
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ""

      # Build and release
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --config .goreleaser.yml
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
